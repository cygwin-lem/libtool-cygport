[PATCH 1/4] Fix regression in command-line length computation.

* libltdl/m4/libtool.m4 (LT_CMD_MAX_LEN): Use `env echo' rather
than possibly-undefined func_fallback_echo, to ensure we fork
and exec for this test.
Regression introduced in v2.2.6-39-g9c3d4d8.
---
 ChangeLog             |    9 +++++++++
 libltdl/m4/libtool.m4 |    2 +-
 2 files changed, 10 insertions(+), 1 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 852dcc6..dc302a3 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,12 @@
+2010-09-22  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>
+
+	Fix regression in command-line length computation.
+	* libltdl/m4/libtool.m4 (LT_CMD_MAX_LEN): Use `env echo' rather
+	than possibly-undefined func_fallback_echo, to ensure we fork
+	and exec for this test.
+	* NEWS: Update.
+	Regression introduced in v2.2.6-39-g9c3d4d8.
+
 2010-09-22  Gary V. Vaughan  <gary@gnu.org>
 
 	Release 2.4.
diff --git a/libltdl/m4/libtool.m4 b/libltdl/m4/libtool.m4
index d812584..6aebb63 100644
--- a/libltdl/m4/libtool.m4
+++ b/libltdl/m4/libtool.m4
@@ -1639,7 +1639,7 @@ AC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl
       # If test is not a shell built-in, we'll probably end up computing a
       # maximum length that is only half of the actual maximum length, but
       # we can't tell.
-      while { test "X"`func_fallback_echo "$teststring$teststring" 2>/dev/null` \
+      while { test "X"`env echo "$teststring$teststring" 2>/dev/null` \
 	         = "X$teststring$teststring"; } >/dev/null 2>&1 &&
 	      test $i != 17 # 1/2 MB should be enough
       do
-- 
1.7.1

